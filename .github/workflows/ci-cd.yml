# Python AI/ML CI/CD Pipeline
# For: Python applications with AI/ML components, Jupyter notebooks
# Self-hosted runners: 192.168.1.16 with 20 available runners

name: 🐍 Python AI/ML Pipeline

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 🔍 Static Analysis & Security
  code-analysis:
    name: 🔍 Code Analysis & Security
    runs-on: [self-hosted, linux, docker]
    timeout-minutes: 15
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt 2>/dev/null || echo "No dev requirements found"

      - name: 🔍 Code formatting with Black
        run: black --check --diff .
        continue-on-error: true

      - name: 🔍 Import sorting with isort
        run: isort --check-only --diff .
        continue-on-error: true

      - name: 🔍 Linting with flake8
        run: flake8 .
        continue-on-error: true

      - name: 🎯 Type checking with mypy
        run: mypy .
        continue-on-error: true

      - name: 🛡️ Security analysis with bandit
        run: bandit -r . -f json -o bandit-report.json
        continue-on-error: true

      - name: 🛡️ CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: 🛡️ Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: 🔒 Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # 🧪 Testing
  tests:
    name: 🧪 Tests
    runs-on: [self-hosted, linux, docker]
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
        test-type: [unit, integration]
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt 2>/dev/null || echo "No dev requirements found"
          pip install pytest pytest-cov pytest-xdist

      - name: 🧪 Run ${{ matrix.test-type }} tests
        run: |
          if [ "${{ matrix.test-type }}" = "unit" ]; then
            pytest tests/unit/ -v --cov=. --cov-report=xml --cov-report=html -n auto
          else
            pytest tests/integration/ -v --cov=. --cov-report=xml --cov-report=html -n auto
          fi
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: ${{ matrix.test-type }}-python${{ matrix.python-version }}
          name: python-${{ matrix.python-version }}-${{ matrix.test-type }}

  # 📓 Notebook Testing
  notebook-tests:
    name: 📓 Jupyter Notebook Tests
    runs-on: [self-hosted, linux, docker]
    timeout-minutes: 20
    if: contains(github.event.head_commit.message, '.ipynb') || github.event_name == 'pull_request'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install nbqa nbconvert jupyter

      - name: 🔍 Check notebook formatting
        run: nbqa black --check notebooks/

      - name: 🧪 Execute notebooks
        run: |
          for notebook in notebooks/*.ipynb; do
            if [ -f "$notebook" ]; then
              echo "Testing $notebook"
              jupyter nbconvert --to notebook --execute --inplace "$notebook"
            fi
          done

      - name: 📊 Upload notebook outputs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: notebook-outputs
          path: notebooks/
          retention-days: 7

  # 🤖 Model Testing
  model-tests:
    name: 🤖 AI/ML Model Tests
    runs-on: [self-hosted, linux, docker, gpu]  # GPU-enabled runner
    timeout-minutes: 45
    if: contains(github.repository, 'ai') || contains(github.repository, 'ml') || contains(github.repository, 'model')
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-benchmark

      - name: 🔍 Check GPU availability
        run: |
          python -c "import torch; print(f'CUDA available: {torch.cuda.is_available()}')" || echo "PyTorch not installed"
          nvidia-smi || echo "No GPU available"

      - name: 🧪 Run model tests
        run: |
          if [ -d "tests/models/" ]; then
            pytest tests/models/ -v --benchmark-only --benchmark-json=benchmark.json
          else
            echo "No model tests found"
          fi

      - name: 📊 Upload benchmark results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: model-benchmarks
          path: benchmark.json
          retention-days: 30

  # 🐳 Docker Build & Security
  docker-build:
    name: 🐳 Docker Build & Security
    runs-on: [self-hosted, linux, docker]
    timeout-minutes: 20
    needs: [code-analysis]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: false
          tags: ${{ env.IMAGE_NAME }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            PYTHON_VERSION=3.11

      - name: 🔒 Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:test
          format: 'sarif'
          output: 'docker-trivy-results.sarif'

      - name: 📊 Upload Docker security results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'docker-trivy-results.sarif'

  # 📊 Performance Benchmarks
  performance:
    name: 📊 Performance Benchmarks
    runs-on: [self-hosted, linux, docker]
    timeout-minutes: 30
    needs: [tests]
    if: github.event_name == 'pull_request'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-benchmark memory-profiler

      - name: 📊 Run performance benchmarks
        run: |
          if [ -d "benchmarks/" ]; then
            pytest benchmarks/ -v --benchmark-json=performance.json
          else
            echo "No benchmarks found"
          fi

      - name: 💾 Memory profiling
        run: |
          if [ -f "profile_memory.py" ]; then
            python -m memory_profiler profile_memory.py
          else
            echo "No memory profiling script found"
          fi

      - name: 📊 Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: performance.json
          retention-days: 30

  # 📦 Release & Deploy
  release:
    name: 📦 Release & Deploy
    runs-on: [self-hosted, linux, docker]
    timeout-minutes: 25
    needs: [tests, notebook-tests, docker-build]
    if: github.event_name == 'release' && github.event.action == 'published'
    permissions:
      contents: write
      packages: write
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install build twine

      - name: 🏗️ Build Python package
        run: python -m build

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: 🚢 Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            PYTHON_VERSION=3.11

      - name: 📦 Publish to PyPI
        if: contains(github.repository, 'package') || contains(github.repository, 'lib')
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload dist/*

  # 🔄 Dependency Updates
  dependency-update:
    name: 🔄 Dependency Updates
    runs-on: [self-hosted, linux, docker]
    timeout-minutes: 15
    if: github.event_name == 'schedule'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 🔄 Update dependencies
        run: |
          pip install pip-tools
          pip-compile --upgrade requirements.in
          pip-compile --upgrade requirements-dev.in 2>/dev/null || echo "No dev requirements"

      - name: 🔒 Security audit
        run: |
          pip install safety
          safety check

      - name: 📝 Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: '🔄 chore: update Python dependencies'
          title: '🔄 Automated Python dependency updates'
          body: |
            ## 🔄 Automated Python Dependency Updates
            
            This PR contains automated dependency updates for Python packages.
            
            - Updated requirements.txt with latest compatible versions
            - Ran security audit with Safety
            
            **Note**: Please review changes and test thoroughly before merging.
          branch: chore/python-dependency-updates
          delete-branch: true

# 📊 Workflow Status Badge
# Add to README.md:
# [![Python AI/ML Pipeline](https://github.com/YOUR_USERNAME/YOUR_REPO/workflows/🐍%20Python%20AI/ML%20Pipeline/badge.svg)](https://github.com/YOUR_USERNAME/YOUR_REPO/actions)